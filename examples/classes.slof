class Point2D<T: Numeric> {
    public x: T;
    public y: T;

    // NOTE: constructor should take mutable this if it is object initializer
    //       if `this` is not provided, it means that it is a static
    //       class initializer
    public Point2D(mut this, x: T = 0, y: T = 0) {
        this.x = x;
        this.y = y;
    }

    public func move_by(mut this, vec: Vector2D<T>) {
        this.x += vec.x_offset;
        this.y += vec.y_offset;
    }
}

// class can inherit from other classes and interfaces by saying `: ...` where
// `...` is a comma-separated list of base classes and interfaces
// NOTE: if any conflicts occurs beetween classes from which class inherit/intefaces which class implements
//       i.e. multiple fields with the same name, methods with incompatible types etc. the compiler error
//       will be generated 
class Point3D<T: Numeric> : Point2D<T> {
    public z: T;

    public Point3D(mut this, x: T = 0; y: T = 0, z: T = 0) : Point2D(x, y) {
        this.z = z;
    }
}

class Vector2D<T: Numeric> {
    public x_offset: T;
    public y_offset: T;

    // NOTE: constructors can also be fallible (this one is not)
    public Vector2D(mut this, x: T = 0, y: T = 0) {
        this.x_offset = x;
        this.y_offset = y;
    }
}

// virtual methods of base class may be overriden by the derived class
class TestClass {
    public virtual func do_something(this) {
        println("i did something");
    }
}

class DerivedClass : TestClass {
    public override func do_something(this) {
        print("i did something else, but also...");
        (this as TestClass).do_something();
    }
}

class DeferTester {
    public func read_from_file(path: FilePath, offset: usz = 0) fallible -> String {
        mut file_to_read = File.open(path, FileMode.ReadOnly | FileMode.Text)!;

        // NOTE: "defer ..." means that the deferred statement will be executed at any point when the scope (in this case of the function)
        //       will be exited (via return or fail) 
        defer file_to_read.close();

        file_to_read.seek(offset)!;
        return file_to_read.read_all_text()!;
    }

    public func do_fallible_thing_and_clear_list_if_it_fails<T>(to_convert: String, to_clear: mut List<T>) fallible -> i64 {
        // NOTE: "defer on fail ..." means that the deferred statement will only be executed if function fails
        defer on fail to_clear.clear();
        return i64.from(to_convert)!;
    }
    
    public func do_fallible_thing_and_inform_user_if_it_succeeds(to_convert: String) fallible -> i64 {
        // NOTE: "defer on success ..." means that the deferred statement will only be executed if function succeeds (does not fail, in other words)
        defer on success println(f"yay, convertion of string `{to_convert}` to i64 was successful!");
        return i64.from(to_convert)!;
    }
}

// interface declares functionality - for now only function declarations may be members of interface
// class may implement functionality of an interface similarly to inheriting from a class
interface Greeter {
    // NOTE: all functions defined in interface are public by default
    func greet() fallible;
}

class Object : Greeter {
    public name: String;

    public Object(mut this, name: String) {
        this.name = name;
    }

    public func greet(this) fallible {
        if this.name == "John Doe" {
            fail with Error(f"cannot greet {this.name}");
        }
        println(f"greetings, {this.name}!");
    }
}


// `extension of` block adds functionality to specified class, it is not inheritance by any means.
//       for now extensions can only add new functions to the extended class
extension of DeferTester {
    public func do_something() {
        println("i did something");
    }
}

interface Car {
    func start_engine(mut this) -> bool;
    func stop_engine(mut this);
}

// `implementation of ... for ...` block may be used to implement interface for specified class
// outside of original class definition
implementation of Car for Object {
    public func start_engine(mut this) -> bool {
        return false; // Object by no means can start it's engine
    }

    public func stop_engine(mut this) {}
}

// `alias ... = ...` can be used to name a type (it is not distinct!)
alias Point2D<f64> = Point;
alias Vector2D<f64> = Vector;
alias i64 = TableIndex;